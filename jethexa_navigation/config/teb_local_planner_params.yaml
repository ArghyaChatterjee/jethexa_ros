# 局部规划器
TebLocalPlannerROS:
 odom_topic: "odom" # 里程计消息的主题名称，由机器人驱动程序或模拟器提供。
 map_frame: "odom" # 全局规划框架（如果是静态地图，此参数通常必须更改为“/map”

 # Trajectory 轨迹配置参数
 teb_autosize: True
 dt_ref: 0.45 # 所需的轨迹时间分辨率（轨迹不固定为dt_ref ，因为时间分辨率是优化的一部分，但如果违反dt_ref +-dt_hysteresis，则轨迹将在迭代之间调整大小。
 dt_hysteresis: 0.1 # 根据当前时间分辨率自动调整大小的滞后，通常约为。建议使用10% 的dt_ref
 global_plan_viapoint_sep: 0.2
 global_plan_overwrite_orientation: True # 覆盖全局规划器提供的局部子目标的方向（因为它们通常只提供二维路径）
 max_global_plan_lookahead_dist: 1.5 # 指定考虑到优化的全局计划子集的最大长度（累积欧几里德距离）。实际长度由本地成本图大小和这个最大界限的逻辑结合决定。设置为零或负数以取消激活此限制。
 feasibility_check_no_poses: 3 # 指定每个采样间隔应检查预测计划上的哪个姿势的可行性。

 publish_feedback: true

 # Robot 机器人配置参数
 max_vel_x: 0.09  # X方向最大速度
 max_vel_y: 0.0 #16.25   # 差速轮机器人无Y方向速度，取0 #########################################################
 max_vel_x_backwards: 0.0 # 向后行驶时机器人的最大绝对平移速度（以米/秒为单位）
 max_vel_theta: 0.25  # 允许的最大旋转速度，单位为弧度/秒
 acc_lim_x: 0.09  # X方向最大线加速度
 acc_lim_y: 0.0 #0.15  # 差速轮机器人无Y方向线加速度，取0 #####################################################
 acc_lim_theta: 0.25 # 最大角加速度
 min_turning_radius: 0.0 #0.05 # 类车机器人的最小转弯半径（差速驱动机器人设置为零
 # 指定用于优化的机器人足迹模型类型。不同的类型是“点”、“圆形”、“线”、“two_circles”和“多边形”。模型的类型显着影响所需的计算时间
 footprint_model: # types: "point", "circular", "two_circles", "line", "polygon"
   types: "point"
   #radius: 0.28 # for type "circular"
   #vertices: [[-0.17, -0.14], [-0.17, 0.14],[0.17, 0.14], [0.17, -0.14]]

 # GoalTolerance 目标容差参数
 xy_goal_tolerance: 0.1 # 到目标位置的允许最终欧几里德距离（以米为单位
 yaw_goal_tolerance: 0.2 # 允许的最终方向误差（以弧度为单位）
 free_goal_vel: false # 去除目标速度约束，使机器人能够以最大速度到达目标

 # Obstacles 障碍物参数
 min_obstacle_dist: 0.38 # 局部规划时base_footprint与障碍物的最小期望距离（以米为单位）
 inflation_dist: 0.0
 include_costmap_obstacles: True # 指定是否应考虑本地成本图的障碍。每个标记为障碍物的单元格都被视为一个点障碍物。因此，不要选择非常小的成本图分辨率，因为它会增加计算时间
 costmap_obstacles_behind_robot_dist: 1.0 # 限制在机器人后面进行规划时考虑的占用的本地成本地图障碍（以米为单位指定距离）
 obstacle_poses_affected: 15 # 每个障碍物位置都附加到轨迹上最近的位姿以保持距离。也可以考虑其他邻居
 costmap_converter_plugin: "costmap_converter::CostmapToLinesDBSRANSAC" # 定义插件名称以便将成本图单元格转换为点/线/多边形。设置一个空字符串以禁用转换，以便将所有单元格视为点障碍。
 #可取值为”costmap_converter::CostmapToPolygonsDBSMCCH”, “costmap_converter::CostmapToLinesDBSRANSAC”, “costmap_converter::CostmapToLinesDBSMCCH”, “costmap_converter::CostmapToPolygonsDBSConcaveHull”, “” # 空字符串表示不启用
 costmap_converter_spin_thread: True # 如果设置为 true，costmap 转换器在不同的线程中调用其回调队列。
 costmap_converter_rate: 5 # 速率，定义 costmap_converter 插件处理当前成本图的频率（该值不应高于成本图更新率）[以赫兹为单位]

 # Optimization 优化参数
 no_inner_iterations: 5 # 在每个外循环迭代中调用的实际求解器迭代次数
 no_outer_iterations: 4 # 每次外循环迭代都会根据所需的时间分辨率dt_ref自动调整轨迹的大小并调用内部优化器（执行no_inner_iterations）。因此，每个计划周期中求解器迭代的总数是两个值的乘积
 optimization_activate: True
 optimization_verbose: False
 penalty_epsilon: 0.05 # 为硬约束近似的惩罚函数添加一个小的安全余量
 weight_max_vel_x: 1 # 满足最大允许平移速度的优化权重
 #weight_max_vel_y: 1 #差速导航注释掉此行 ################################################
 weight_max_vel_theta: 1
 weight_acc_lim_x: 1
 #weight_acc_lim_y: 1 #差速导航注释掉此行 ################################################
 weight_acc_lim_theta: 1
 weight_kinematics_nh: 1000  # 满足非完整运动学的优化权重（此参数必须很高，因为运动学方程构成等式约束，即使值 1000 也不意味着由于与其他成本相比较小的“原始”成本值而导致矩阵条件不佳）
 weight_kinematics_forward_drive: 100000000 # 强制机器人仅选择前向（正平移速度）的优化权重。较小的重量（例如 1.0）仍然允许向后行驶。1000 左右的值几乎可以防止向后行驶（但不能保证）。
 weight_kinematics_turning_radius: 1 # 执行最小转弯半径的优化权重（仅适用于类车机器人）。
 weight_optimaltime: 1 # 用于收缩轨迹 wrt 转换/执行时间的优化权重
 weight_obstacle: 50 # 与障碍物保持最小距离的优化权重
 weight_inflation: 0.2
 weight_dynamic_obstacle: 10 # not in use yet
 weight_dynamic_obstacle_inflation: 0.2
 weight_viapoint: 1
 weight_adapt_factor: 2
 selection_alternative_time_cost: False # 如果为真，则时间成本（时间差的平方和）将替换为总转换时间（时间差的总和）。

 # Homotopy Class Planner
 enable_homotopy_class_planning: False # 激活并行规划（需要更多的 CPU 资源，因为同时优化了多个轨迹）
 enable_multithreading: True # 激活多线程以便在不同线程中规划每个轨迹
 simple_exploration: False
 max_number_classes: 4 # 指定考虑的不同轨迹的最大数量（限制计算量）
 roadmap_graph_no_samples: 15 # 指定为创建路线图而生成的样本数
 roadmap_graph_area_width: 5 # 在起点和目标之间的矩形区域中对随机关键点/航点进行采样。以米为单位指定该区域的宽度。
 h_signature_prescaler: 0.5 # 标度用于区分同伦类的内部参数（H-signature ）。警告：仅减小此参数，如果您观察到局部代价地图中障碍物过多的问题，请不要选择极低，否则无法区分障碍物（0.2< value <=1）。
 h_signature_threshold: 0.1 # 如果实部和复部的差均低于指定阈值，则假定两个 H 签名相等
 obstacle_keypoint_offset: 0.1
 obstacle_heading_threshold: 0.45
 visualize_hc_graph: False # 可视化为探索独特轨迹而创建的图形（检查 rviz 中的标记消息）
